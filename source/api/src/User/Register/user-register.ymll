AWSTemplateFormatVersion: '2010-09-09'
Description: Register a User on the User Table
Parameters:
  RestApi:
    Description: Name of the RestAPI
    Type: String
  ResourceId:
    Description: ID of the Resource
    Type: String
  Stage:
    Description: Stage
    Type: String
Resources:
  UserRegisterApi:
    Type: AWS::ApiGateway::Method
    DependsOn:
    - UserRegisterLambda
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "UserRegisterLambda.Arn"
      RestApiId: !Ref RestApi
      ResourceId: !Ref ResourceId

  UserRegisterLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - UserRegisterIamRole
    Properties:
      Code: ./code
      Description: Function to Register User
      FunctionName: UserRegister
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt "UserRegisterIamRole.Arn"
      Runtime: nodejs12.x
      Timeout: 60
      Environment:
        Variables:
          USER_TABLE: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Stage}-UserTable"
  UserRegisterIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:RegisterLogGroup"
                  - "logs:RegisterLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: '*'
              - Action:
                  - "ec2:RegisterNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Effect: "Allow"
                Resource: '*'
              - Action:
                  - "dynamodb:PutItem"
                Effect: "Allow"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Stage}-UserTable"
          PolicyName: "UserRegisterIamRole"
  UserRegisterApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "UserRegisterLambda.Arn"
      Principal: "apigateway.amazonaws.com"
